// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        BigInt     @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  role      Role       @relation(fields: [roleId], references: [id])
  roleId    Int
  orders    Order[]
  cartItems CartItem[]
  reviews   Review[]
  vouchers  Voucher[]

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime  @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  active    Boolean   @default(true)
}

model Voucher {
  id         BigInt       @id @default(autoincrement())
  code       String       @unique
  discount   Float
  type       DiscountType
  expiryDate DateTime

  userId BigInt
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime  @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  active    Boolean   @default(true)
}

enum DiscountType {
  PERCENT
  FIXED
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime  @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  active    Boolean   @default(true)
}

model Category {
  id       BigInt    @id @default(autoincrement())
  name     String
  products Product[]

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime  @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  active    Boolean   @default(true)
}

model Product {
  id          BigInt  @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  categoryId  BigInt

  category      Category       @relation(fields: [categoryId], references: [id])
  productImages ProductImage[]
  reviews       Review[]
  cartItems     CartItem[]
  orderItems    OrderItem[]

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime  @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  active    Boolean   @default(true)
}

model ProductImage {
  id        BigInt  @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId BigInt

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime  @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  active    Boolean   @default(true)
}

model CartItem {
  id        BigInt  @id @default(autoincrement())
  quantity  Int
  user      User    @relation(fields: [userId], references: [id])
  userId    BigInt
  product   Product @relation(fields: [productId], references: [id])
  productId BigInt

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime  @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  active    Boolean   @default(true)
}

model Order {
  id     BigInt      @id @default(autoincrement())
  user   User        @relation(fields: [userId], references: [id])
  userId BigInt
  status String
  total  Float
  items  OrderItem[]

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime  @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  active    Boolean   @default(true)
  Payment   Payment?
}

model OrderItem {
  id        BigInt  @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   BigInt
  product   Product @relation(fields: [productId], references: [id])
  productId BigInt
  quantity  Int
  price     Float

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime  @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  active    Boolean   @default(true)
}

model Payment {
  id      BigInt @id @default(autoincrement())
  orderId BigInt @unique
  order   Order  @relation(fields: [orderId], references: [id])

  method        String // 'vnpay', 'momo', 'cod', ...
  status        String // 'pending', 'success', 'failed', ...
  transactionId String? // Mã giao dịch từ bên thứ 3 (ví dụ: VNPay)
  amount        Float
  paymentTime   DateTime? // thời gian thanh toán thực tế

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        BigInt  @id @default(autoincrement())
  content   String
  rating    Int
  user      User    @relation(fields: [userId], references: [id])
  userId    BigInt
  product   Product @relation(fields: [productId], references: [id])
  productId BigInt

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime  @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  active    Boolean   @default(true)
}
